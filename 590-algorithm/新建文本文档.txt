#include <stdio.h>
#include <iostream>
#include <time.h>
#include <cstdlib>

using namespace std;

void bubble_sort(int array[], int array_length){
    // sort array using bubble sort algorithm.
    int cur = 0;
    for(int i = 0; i < array_length; i++){
        for(int j = array_length -1; j > i + 1; j--){
            if(array[j] < array[j - 1]){
                cur = array[j];
                array[j] = array[j - 1];
                array[j - 1] = cur;
            }
        }
    }
}

void insertion_sort(int array[], int array_length){
    // sort array using insertion sort algorithm.
    int key = 0;
    for(int j = 2; j < array_length; j++){
        key = array[j];
        int i = j - 1;
        while(array[i] > key && i > 0){
            array[i + 1] = array[i];
            i = i - 1;
        } 
        array[i + 1] = key;
    }
}

void merge_sort(int A[], int lo, int hi){
    // sort array using merge sort algorithm.
     if(lo < hi){
        int mid = lo + (hi - lo) / 2;
   
        merge_sort(int A[], int lo, int mid);
        merge_sort(int A[], int mid + 1, int hi);
        merge(int A[], int lo, int mid, int hi);
        //system.out.println(Arrays.toString(A));
     }    
}

void merge(int A[],int lo, int mid, int hi){
    int[] B = new int[hi - lo + 1];
    int i1 = lo;
    int i2 = mid + 1;
    int i = lo;

    while(i1 < mid && i2 < hi){
        if(A[i1] < A[i2]){
            B[i++] = A[i1++];
        }
        else{
            B[i++] = A[i2++];
        }
    }

    while(i1 <= mid){
        B[i++] = A[i1++];
    }

    while(i2 <= high){
        B[i++] = A[i2++];
    }

    for(int j = 0; j < B.length; j++){
        A[lo + j] = B[j];
    }
}

bool check(int array[], int lo, int mid, int hi){
    // complete the function to check if the array is sorted.
    for(int i = lo + 1; i <= hi; i++){
        if(array[i - 1] > array [i]){
            return false;
        }
        return true;
    }
}

// write 3 more functions one for each of the sorting algorithm to handle pointer array and do the sorting (use function overloading)
// Hints: just add an additional parameter to the overloaded function signature (an "int m" as the third parameter)
void bubble_sort(int *array, int num){
    int i, j, temp, t;
    array = (int *)calloc(num,sizeof(int));
    if(array == NULL){
        printf("can not allocate memory, \n");
        exit(1);
    }

    for(i = 0; i < num; i++){
        for(j = 0; j < num - i - 1; j++){
            if(*(array + j) > *(array + j + 1) ){
                temp = *(array + j);
                *(array + j) = *(array + j + 1);
                *(array + j + 1) = temp;
            }
        }
    }
}

void insertion_sort(int *array, int num){
    int i, j, temp, t;
    array = (int *)calloc(num,sizeof(int));
    if(array == NULL){
        printf("can not allocate memory, \n");
        exit(1);
    }

    for(i = 1; i < num; i++){
        temp = *(array + i);
        t = i - 1;
        while(t >= 0 && *(array + t) > temp){
            *(array + t + 1) = *(array + t);
            t--;
        }
        *(array + t + 1) = temp;
    }
}

void merge_sort(int *array, int l, int r){
    // sort array using merge sort algorithm.
     if(l < r){
        int mid = l + (r - l) / 2;
   
        merge_sort(array, l, m);
        merge_sort(array, m+1, r);
        merge(array, l, m, r);

     }    
}

void merge(int *array,int lo, int mid, int hi){
    int i, j, k;
    int n1 = mid - lo + 1;
    int n2 = hi - mid;

    int *left = (int *)calloc(n1,sizeof(int));
    int *right = (int *)calloc(n2,sizeof(int));

    for(i = 0; i < n1; i++){
        left[i] = arr[lo + i];
    }
    for(j = 0; j < n2; j++){
        right[j] = arr[mid + 1 + j];
    }
   
    i = 0;
    j = 0;
    k = lo;
    while(i < n1 && j < n2){
        if(left[i] <= right[j]){
            array[k] = left[i];
            i++;
        }
        else{
            array[k] = right[j];
            j++;
        }
        k++;
    }

    while(i < n1){
       array[k] = left[i];
       i++;
       k++;
    }

    while(j <= n2){
       array[k] = right[j];
       j++;
       k++;
    }

    free(left);
    free(right);

}

int main()
{
    start = clock();
    end = clock();
    float TimeValue;
    TimeValue = end -start;

    int a[10];
    int b[100];
    int c[1000];

    for(int i = 0; i < a.length; i++){
        rand()%100;
    }

    for(int i = 0; i < a.length; i++){
        rand()%1000;
    }

    for(int i = 0; i < a.length; i++){
        rand()%10000;
    }

    bubble_sort(a,10);
    
    return 0;
}
