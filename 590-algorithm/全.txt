#include <stdio.h>
#include <iostream>
#include <time.h>
#include <cstdlib>

using namespace std;



//problem 1

void bubble_sort(int array[], int array_length){
    // sort array using bubble sort algorithm.
    int cur = 0;
    for(int i = 0; i < array_length; i++){
        for(int j = array_length -1; j >= i + 1; j--){
            if(array[j] < array[j - 1]){
                cur = array[j];
                array[j] = array[j - 1];
                array[j - 1] = cur;
            }
        }
    }
}

void insertion_sort(int array[], int array_length){
    // sort array using insertion sort algorithm.
    int key = 0;
    for(int j = 2; j < array_length; j++){
        key = array[j];
        int i = j - 1;
        while(array[i] > key && i >= 0){
            array[i + 1] = array[i];
            i = i - 1;
        } 
        array[i + 1] = key;
    }
}

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

//problem 2
void bubble_sort(int array[], int array_length, int cur){
    // sort array using bubble sort algorithm.
    //int cur = 0;
    for(int i = 0; i < array_length; i++){
        for(int j = array_length -1; j >= i + 1; j--){
            if(array[j] < array[j - 1]){
                cur = array[j];
                array[j] = array[j - 1];
                array[j - 1] = cur;
            }
        }
    }
}

void insertion_sort(int array[], int array_length, int key){
    // sort array using insertion sort algorithm.
    //int key = 0;
    for(int j = 2; j < array_length; j++){
        key = array[j];
        int i = j - 1;
        while(array[i] > key && i >= 0){
            array[i + 1] = array[i];
            i = i - 1;
        } 
        array[i + 1] = key;
    }
}

void merge2(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r, int t) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m, t);
        mergeSort(arr, m + 1, r, t);

        merge2(arr, l, m, r);
    }
}

 int main()
 {
     int* pArray;//设置指针
    int i;
    pArray = new int[10];
   //动态分配数组
   //向数组中输入5个整数
   
   
    for (i = 0; i < 10; i++)//循环输入数值，使数值的数量不能小于5
        pArray[i] = rand()%100;
    insertion_sort(pArray, 10, 0);//调用排序算法
    for (i = 0; i < 10; i++)//循环输入数值，使数值的数量不能小于5
        cout << pArray[i] << "  ";
     //system("pause");
     return 0;
 }